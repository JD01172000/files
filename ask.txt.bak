maaari mo ba baguhin Ang brightness, contrast, saturation, temperature, unsharp at fade dito sa aking java coding gamit Ang GLSL/HLSL? ayaw ko Kasi Ng color matrix, Narito Ang code ko, 
package jdexpert.filters;

import android.app.Service;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.PixelFormat;
import android.os.Build;
import android.os.IBinder;
import android.provider.Settings;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import android.annotation.Nullable;

import java.io.IOException;

public class ScreenFilterService extends Service {
    private WindowManager windowManager;
    private LinearLayout controlLayout;
    private ImageView filterView;
    private Bitmap filterBitmap;
    private Button toggleButton;
    private boolean isControlVisible = true;

    @Override
    public void onCreate() {
        super.onCreate();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(this)) {
            Toast.makeText(this, "Overlay permission required", Toast.LENGTH_LONG).show();
            stopSelf();
            return;
        }

        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);

        try {
            filterBitmap = BitmapFactory.decodeStream(getAssets().open("transparent_filter.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        filterView = new ImageView(this);
        filterView.setImageBitmap(filterBitmap);
        filterView.setAlpha(0.2f);

        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,
            PixelFormat.TRANSLUCENT);
        params.gravity = Gravity.TOP | Gravity.START;

        windowManager.addView(filterView, params);

        initializeControls();
    }

    private void initializeControls() {
        controlLayout = new LinearLayout(this);
        controlLayout.setOrientation(LinearLayout.VERTICAL);
        controlLayout.setBackgroundColor(0xFF333333);
        controlLayout.setPadding(20, 20, 20, 20);

        toggleButton = new Button(this);
        toggleButton.setText("Hide");
        toggleButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    isControlVisible = !isControlVisible;
                    controlLayout.setVisibility(isControlVisible ? View.VISIBLE : View.GONE);
                    toggleButton.setText(isControlVisible ? "Hide" : "Show");
                }
            });

        WindowManager.LayoutParams toggleParams = new WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT);
        toggleParams.gravity = Gravity.START | Gravity.TOP;

        windowManager.addView(toggleButton, toggleParams);

        addSeekBar("Brightness");
        addSeekBar("Contrast");
        addSeekBar("Saturation");
        addSeekBar("Temperature");
        addSeekBar("Fade");
        addSeekBar("Unsharp");

        controlLayout.setOnTouchListener(new View.OnTouchListener() {
                private int initialX;
                private int initialY;
                private float initialTouchX;
                private float initialTouchY;
                private WindowManager.LayoutParams updatedParams;

                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    if (controlLayout.getLayoutParams() instanceof WindowManager.LayoutParams) {
                        updatedParams = (WindowManager.LayoutParams) controlLayout.getLayoutParams();
                    } else {
                        return false;
                    }

                    switch (event.getAction()) {
                        case MotionEvent.ACTION_DOWN:
                            initialX = updatedParams.x;
                            initialY = updatedParams.y;
                            initialTouchX = event.getRawX();
                            initialTouchY = event.getRawY();
                            return true;
                        case MotionEvent.ACTION_MOVE:
                            updatedParams.x = initialX + (int) (event.getRawX() - initialTouchX);
                            updatedParams.y = initialY + (int) (event.getRawY() - initialTouchY);
                            windowManager.updateViewLayout(controlLayout, updatedParams);
                            return true;
                    }
                    return false;
                }
            });

        

        WindowManager.LayoutParams controlParams = new WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT);
        controlParams.gravity = Gravity.START | Gravity.TOP;

        windowManager.addView(controlLayout, controlParams);
    }

    private void addSeekBar(String label) {
        TextView textView = new TextView(this);
        textView.setText(label);
        textView.setTextColor(0xFFFFFFFF);

        final TextView countText = new TextView(this);
        countText.setText("50");
        countText.setTextColor(0xFFFFFFFF);

        SeekBar seekBar = new SeekBar(this);
        seekBar.setMax(100);
        seekBar.setProgress(50);
        seekBar.setTag(label);

        LinearLayout.LayoutParams seekBarParams = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        );
        seekBar.setLayoutParams(seekBarParams);

        LinearLayout container = new LinearLayout(this);
        container.setOrientation(LinearLayout.VERTICAL);
        container.setPadding(10, 10, 10, 10);

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    adjustImage((String) seekBar.getTag(), progress);
                    countText.setText(String.valueOf(progress));
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {}

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {}
            });

        container.addView(textView);
        container.addView(seekBar);
        container.addView(countText);

        controlLayout.addView(container);
    }

    private void adjustImage(String type, int value) {
        ColorMatrix colorMatrix = new ColorMatrix();
        float scaleFactor = (value - 50) * 2 / 100f;

        switch (type) {
            case "Brightness":
                colorMatrix.setScale(1 + scaleFactor, 1 + scaleFactor, 1 + scaleFactor, 1);
                break;
            case "Contrast":
                float contrast = 1 + scaleFactor;
                float translate = (-.5f * contrast + .5f) * 255;
                colorMatrix.set(new float[]{
                                    contrast, 0, 0, 0, translate,
                                    0, contrast, 0, 0, translate,
                                    0, 0, contrast, 0, translate,
                                    0, 0, 0, 1, 0
                                });
                break;
            case "Saturation":
                colorMatrix.setSaturation(1 + scaleFactor);
                break;
            case "Temperature":
                colorMatrix.set(new float[]{
                                    1 + scaleFactor / 2, 0, 0, 0, 0,
                                    0, 1 + scaleFactor / 3, 0, 0, 0,
                                    0, 0, 1, 0, 0,
                                    0, 0, 0, 1, 0
                                });
                break;
            case "Fade":
                float fade = 1 - (scaleFactor / 2);
                colorMatrix.set(new float[]{
                                    fade, 0, 0, 0, 0,
                                    0, fade, 0, 0, 0,
                                    0, 0, fade, 0, 0,
                                    0, 0, 0, 1, 0
                                });
                break;
            case "Unsharp":
                colorMatrix.set(new float[]{
                                    1 + scaleFactor, -scaleFactor, -scaleFactor, 0, 0,
                                    -scaleFactor, 1 + scaleFactor, -scaleFactor, 0, 0,
                                    -scaleFactor, -scaleFactor, 1 + scaleFactor, 0, 0,
                                    0, 0, 0, 1, 0
                                });
                break;
        }

        filterView.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (filterView != null) windowManager.removeView(filterView);
        if (controlLayout != null) windowManager.removeView(controlLayout);
        if (toggleButton != null) windowManager.removeView(toggleButton);
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}